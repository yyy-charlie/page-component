/**
 * 导出ztree配置
 */
var fileContent = "";
var ztreeId = "";

function getTreeSetting() {
    let selectedMulti = setTreeSettingConfig("selectedMulti");
    let showLine = setTreeSettingConfig("showLine");
    let txtSelectedEnable = setTreeSettingConfig("txtSelectedEnable");
    let showRemoveBtn = getRemoveConfig();
    let showRenameBtn = getRenameConfig();
    let inEditingState = setTreeSettingConfig("inEditingState");
    let renameTitle = $("#renameTitle").val();
    let removeTitle = $("#removeTitle").val();
    let showRadioOrCheckbox = setTreeSettingConfig("showRadioOrCheckbox");
    let chkStyle = $("#chkStyle").val() === 1 ? "checkbox" : "radio";
    let chkboxType = getChkboxTypeConfig();
    return "{\n" +
        "   view: {\n" +
        "       selectedMulti:" + selectedMulti + ",\n" +
        "       addHoverDom: addHoverDom,\n" +
        "       removeHoverDom: removeHoverDom,\n" +
        "       showLine:" + showLine + ",\n" +
        "       txtSelectedEnable:" + txtSelectedEnable + ",\n" +
        "   },\n" +
        "   edit:{\n" +
        "       showRemoveBtn:" + showRemoveBtn + ",\n" +
        "       showRenameBtn:" + showRenameBtn + ",\n" +
        "       enable:" + inEditingState + ",\n" +
        "       renameTitle:'" + renameTitle + "',\n" +
        "       removeTitle:'" + removeTitle + "',\n" +
        "       drag:{\n" +
        "           isCopy:false,\n" +
        "           isMove: false\n" +
        "       }\n" +
        "   },\n" +
        "   check:{\n" +
        "       enable:" + showRadioOrCheckbox + ",\n" +
        "       chkStyle:'" + chkStyle + "',\n" +
        "       chkboxType:" + chkboxType + ",\n" +
        "   },\n" +
        "   callback:{\n" +
        "       onClick: zTreeOnClick" + ",\n" +
        "       onRemove: zTreeOnRemove" + ",\n" +
        "   }\n" +
        "   };\n";
}

var addHoverDomObj = {};

function getAddHoverDom() {
    //显示新增按钮
    var showAddBtn = $("#showAddBtn").val();
    if ("1" === showAddBtn) {
        addHoverDomObj["showAddBtn"] =
            `var aObj = $("#" + treeNode.tId + "_span");

             if (treeNode.editNameFlag || $("#diyBtn_" + treeNode.tId).length > 0) return;

             var editStr = "<span class='button add' id='diyBtn_" + treeNode.tId + "' ></span>";

             aObj.append(editStr);`;

        addHoverDomObj["addBtnBind1"] = `var btn = $("#diyBtn_" + treeNode.tId);
                            if (btn) btn.bind("click", function () {\n`;
        var addBtnTrigger = $("#addBtnTrigger").val();
        //打开新增模态框
        if (addBtnTrigger === "1") {
            //新增节点请求地址
            var addNodeUrl = $("#addNodeUrl").val();
            addHoverDomObj["addModal"] = `      //初始化模态框
                                    initAddModal(treeNode); 
                 
                                function initAddModal(treeNode) { 
                                    //modal 
                                    var tModalConfigure = { 
                                        id: "addModule", 
                                        frameObj: $("#modal_department"), 
                                        title: "新增", 
                                        callbacks: { 
                                            onCommit: addCommit 
                                        } 
                                    }; 
                                    var tModal = new comModal(); 
                                    tModal.init(tModalConfigure); 
                 
                                    var formOption = { 
                                        formId: "moduleForm", 
                                        initContent: [ 
                                            { 
                                                itemId: "addName", 
                                                label: { 
                                                    text: "新增名称" 
                                                }, 
                                            }] 
                                    }; 
                                    var tForm = new comForm(); 
                                    tForm.init(formOption); 
                 
                                    tModal.appendEle(tForm); 
                 
                                    function addCommit(e, oModal) { 
                                        let oVal = oModal.getValues(); 
                                        var data = { 
                                            name: oVal.addName, 
                                            parentId: treeNode.id 
                                        }; 
                                        requestAjax("post", "` + addNodeUrl + `", "false", JSON.stringify(data), "json", function (res) { 
                                            alert(res.description); 
                                            if (res.code === 200) { 
                                                //隐藏模态框 
                                                oModal.hide(); 
                 
                                                //新增节点 
                                                var treeObj = $.fn.zTree.getZTreeObj("` + ztreeId + `"); 
                                                var arr = []; 
                                                arr.push(res.data); 
                                                treeObj.addNodes(treeNode, arr); 
                                            } 
                                        }); 
                                    } 
                                }`;
        }
        addHoverDomObj["addBtnBind2"] = '});\n';

        //悬浮显示自定义编辑节点按钮
        //处于编辑状态
        var inEditingState = $("#inEditingState").val();
        //显示重命名按钮
        var showRenameBtn = $("#showRenameBtn").val();
        if (inEditingState === "1" && showRenameBtn === "2") {
            addHoverDomObj["diyEditBtn"] = 'var aObj = $("#" + treeNode.tId + "_span");\n' +
                '    if (treeNode.editNameFlag || $("#diyBtn_" + treeNode.tId + 2).length > 0) return;\n' +
                '    var editStr = "<span class=\'button edit\' id=\'diyBtn_" + treeNode.tId + 2 + "\' ></span>"\n' +
                '    aObj.append(editStr);\n';

            addHoverDomObj["diyEditBtnBind1"] = `var btn2 = $("#diyBtn_" + treeNode.tId + 2 );
                '                if (btn2) btn2.bind("click", function () {`;
            let editBtnTrigger = $("#editBtnTrigger").val();
            if (editBtnTrigger === '1') {
                //新增节点请求地址
                let editNodeUrl = $("#editNodeUrl").val();
                addHoverDomObj["editModal"] = `//初始化模态框 
                                        initEditModal(treeNode); 
                     
                                    function initEditModal(treeNode) { 
                                        //modal 
                                        var tModalConfigure = { 
                                            id: "editModule", 
                                            frameObj: $("#modal_department"), 
                                            title: "修改", 
                                            callbacks: { 
                                                onCommit: editCommit 
                                            } 
                                        }; 
                                        var tModal = new comModal(); 
                                        tModal.init(tModalConfigure); 
                     
                                        var formOption = { 
                                            formId: "moduleForm", 
                                            initContent: [ 
                                                { 
                                                    itemId: "editName", 
                                                    label: { 
                                                        text: "修改名称" 
                                                    }, 
                                                    value: treeNode.name  
                                                }] 
                                        }; 
                                        var tForm = new comForm(); 
                                        tForm.init(formOption); 
                     
                                        tModal.appendEle(tForm); 
                     
                                        function editCommit(e, oModal) { 
                                            let oVal = oModal.getValues(); 
                                            var data = { 
                                                name: oVal.editName, 
                                                parentId: treeNode.id 
                                            }; 
                                            requestAjax("post", "` + editNodeUrl`+", "false", JSON.stringify(data), "json", function (res) { 
                                                alert(res.description); 
                                                if (res.code === 200) { 
                                                    //隐藏模态框 
                                                    oModal.hide(); 
                     
                                                    //编辑节点 
                                                    var treeObj = $.fn.zTree.getZTreeObj("` + ztreeId + `"); 
                                                    var nodes = treeObj.getNodesByParam("id", treeNode.id, null); 
                                                    var node = nodes[0]; 
                                                    node.name = oVal.editName; 
                                                        treeObj.updateNode(node); 
                                                } 
                                            }); 
                                        } 
                                    }`;
            }
            addHoverDomObj["diyEditBtnBind2"] = '});\n';
        }
    }
}

function addHoverDom() {
    fileContent += "function addHoverDom(treeId, treeNode) {\n";
    Object.keys(addHoverDomObj).forEach(function (key) {
        fileContent += addHoverDomObj[key];
    });
    fileContent += "\n}\n";
}

function removeHoverDom() {
    fileContent += `function removeHoverDom(treeId, treeNode) {
                $("#diyBtn_" + treeNode.tId).unbind().remove();
                $("#diyBtn_" + treeNode.tId + 2).unbind().remove();
            }`
}

function zTreeOnClick() {
    let openNode = $("#openNode").val();
    if ("0" === openNode) {
        fileContent += `function zTreeOnClick(event, treeId, treeNode) {
        //点击自动展开/折叠此节点
         ` + ztreeId + `.oTree.expandNode(treeNode, null, false, false);
    }`;
    } else {
        fileContent += `   function zTreeOnClick(event, treeId, treeNode) {
                }`
    }
}

function zTreeOnRemove() {
    fileContent += `function zTreeOnRemove(event, treeId, treeNode) {
          if (confirm("是否删除该节点？")) {
              //根据节点数据的属性搜索
              var nodes = testTree.oTree.getNodesByParam("id", treeNode.id, null);
              for (let i = 0, l = nodes.length; i < l; i++) {
                   ` + ztreeId + `.oTree.removeNode(nodes[i]);
              }
          }
        }`
}

/**
 * 获取勾选 checkbox 对于父子节点的关联关系
 * @returns {string|null}
 */
function getChkboxTypeConfig() {
    //显示单选/复选框
    let showRadioOrCheckbox = $("#showRadioOrCheckbox").val();
    //选框类型（单选/复选）
    let chkStyle = $("#chkStyle").val();
    //勾选后是否影响父节点
    let influenceParentNode = $("#influenceParentNode").val();
    //取消勾选后是否影响子节点
    let influenceChildrenNode = $("#influenceChildrenNode").val();

    if ("1" === showRadioOrCheckbox && "1" === chkStyle) {
        var chkboxType = {};
        switch (influenceParentNode) {
            case "0":
                chkboxType["Y"] = "";
                break;
            case "1":
                chkboxType["Y"] = "p";
                break;
            case "2":
                chkboxType["Y"] = "s";
                break;
            case "3":
                chkboxType["Y"] = "ps";
                break;
        }
        switch (influenceChildrenNode) {
            case "0":
                chkboxType["N"] = "";
                break;
            case "1":
                chkboxType["N"] = "p";
                break;
            case "2":
                chkboxType["N"] = "s";
                break;
            case "3":
                chkboxType["N"] = "ps";
                break;
        }
        return JSON.stringify(chkboxType);
    }
    return null;
}

function getRenameConfig() {
    //编辑状态
    let inEditingState = $("#inEditingState").val();
    //显示重命名按钮
    let showRenameBtn = $("#showRenameBtn").val();
    //重命名按钮显示限制
    let renameBtnShowLimit = $("#renameBtnShowLimit").val();
    if (inEditingState === "1" && showRenameBtn !== "0") {
        if (renameBtnShowLimit === "1") {
            return true;
        } else {
            return "setRenameBtn";
        }
    }
    return false;
}

function getRemoveConfig() {
    //显示重命名按钮
    let inEditingState = $("#inEditingState").val();
    let showRemoveBtn = $("#showRemoveBtn").val();
    let deleteBtnShowLimit = $("#deleteBtnShowLimit").val();
    if (inEditingState === "1" && "1" === showRemoveBtn) {
        if ("1" === deleteBtnShowLimit) {
            return true;
        } else {
            return "setRemoveBtn";
        }
    }
    return false;
}


//父节点不显示编辑名称按钮
function setRenameBtn() {
    fileContent += `function setRenameBtn(treeId, treeNode) {
                return !treeNode.isParent;
            }`;
}

function setRemoveBtn() {
    fileContent += `function setRemoveBtn(treeId, treeNode) {
                        return !treeNode.isParent;
                        }`;
}


function setTreeSettingConfig(ele) {
    let value = $("#" + ele).val();
    return "1" === value;
}

function requestZtreeAjax() {
    var treeUrl = $("#treeUrl").val();
    fileContent += '    requestAjax(\'post\', "' + treeUrl + '" , \'false\', null, \'json\', function (res) {\n' +
        '        var _data = res.data;\n' +
        '        let nodes = ztreeFormat(_data);\n' +
        '        $.fn.zTree.init(' + ztreeId + ', ' + ztreeId + '.setting, nodes);\n' +
        '        ' + ztreeId + '.oTree = $.fn.zTree.getZTreeObj("' + ztreeId + '");\n' +
        '    });\n' +
        '\n' +
        '    function ztreeFormat(data) {\n' +
        '        $.each(data, function (index, ele) {\n' +
        '            ele["pId"] = ele.parentId;\n' +
        '            ele["open"] = true;\n' +
        '            var children = ele.children;\n' +
        '            if (children != null && children.length > 0) {\n' +
        '                ztreeFormat(children)\n' +
        '            }\n' +
        '        });\n' +
        '        return data;\n' +
        '    }\n'
}

function exportTreeConfig() {
    ztreeId = $("#ztreeId").val();
    fileContent = "var " + ztreeId + " = " + "$('#" + ztreeId + "');\n";
    fileContent += `(function initSystem() {
            loadTree();
        })();`;

    fileContent += "function loadTree(){\n  " + ztreeId + ".setting = " + getTreeSetting();

    requestZtreeAjax();

    fileContent += "\n}\n";

    getAddHoverDom();
    addHoverDom();// fileContent add 'function addHoverDom(){}'
    setRemoveBtn();
    setRenameBtn();

    removeHoverDom();
    zTreeOnClick();
    zTreeOnRemove();
    downloadFile("ztreeConfig.js", fileContent); //fileContent is string
}

