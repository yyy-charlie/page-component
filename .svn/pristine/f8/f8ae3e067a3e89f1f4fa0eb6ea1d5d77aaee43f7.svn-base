var boObjTree = $('#boObjTree');


var addSystemModal = $('#addSystemModal');
var addModuleModal = $('#addModuleModal');

var objectInfoTable = new commTable();


(function initSystem() {

    loadTree();

    initTable();
})();

/**
 * 初始化表格
 */
function initTable() {
    objectInfoTable.init({
        tableID: "objectInfoTable",
        //isNeedOperate和otherOperationArr配套使用
        isNeedOperate: true,
        isNeedDetails: true,
        otherOperationArr: ['update'],
        // otherDetailsArr: ['stepModuleDetails'],
        //操作按钮
        operate: function () {
            return deleteModuleBtn();
        },
        //详情按钮
        // details: function () {
        //     return getModuleDetails();
        // },
        //点击查看之后的方法
        // stepModuleDetails: function (e, value, row, index) { //模块的步骤集合
        //     getStepModuleSteps(e, value, row, index);
        // },
        //点击删除之后的方法
        // delete: function (e, value, row, index) {
        //     deleteModule(e, value, row, index);
        // },
        //点击修改之后的方法
        update: function (e, value, row, index) { //模块的步骤集合
            updateStepModuleSteps(e, value, row, index);
        }
    }, {
        showRefresh: false,
        showExport: false,
        showColumns: false,
        showPaginationSwitch: false,
        height: 500,
        pageNumber: 1,
        pageSize: 1000,
        pageList: []
    });

    let res = {
        data: [
            {
                field: 'id',
                title: 'id',
                visible: false
            },
            {
                field: 'name',
                title: '属性名',
            },
            {
                field: 'description',
                title: '属性描述'
            },
            {
                field: 'javaType',
                title: '类型'
            },
            {
                field: 'ifId',
                title: '主键'
            },
            {
                field: 'ifForeignKey',
                title: '外键'
            },
            {
                field: 'ifIgnoreParam',
                title: '持久化'
            }
        ],
        state: {
            code: 200,
            description: "成功"
        }
    };

    objectInfoTable.fillHead(res);

    // requestAjax("post", 'stepModule/getStepModule', false, JSON.stringify({
    //     systemId: systemId,
    //     systemModuleId: moduleId
    // }), 'json', function (result) {
    //     if (result.code === 200) {
    //         stepModuleTable.appendData(result.data);
    //     } else {
    //         stepModuleTable.data = result.data;
    //     }
    // });

    function deleteModuleBtn() {
        return '<button type="button" class="update btn btn-primary btn-xs">&nbsp;修改&nbsp;</button>&nbsp;&nbsp;'
    }

}

function updateStepModuleSteps(e, value, row, index) {
    //modal
    let tModalConfigure = {
        id: 'updateModuleStepListModal',
        frameObj: $('#modal_department'),
        title: '修改模块步骤',
        callbacks: {
            onCommit: updateModuleStepCommit
        }
    };
    let tModal = new comModal();
    tModal.init(tModalConfigure);

    var formOption = {
        formId: 'testForm',
        initContent: [{
            itemId: "moduleName",
            label: {
                text: "模块名称"
            },
            value: row.moduleName
        }]
    };
    var tForm = new comForm();
    tForm.init(formOption);

    tModal.appendEle(tForm);

    //在模态框里设置模块id
    tModal.setData(row);

    $('#modal_department .modal-body').append("<div id=\"moduleStepTree\" class=\"ztree\">\n" + "</div>");       //tree数据

    /**
     * 提交修改模块步骤
     */
    function updateModuleStepCommit(e, oModal) {
        let oVal = oModal.getValues();

        var treeObj = $.fn.zTree.getZTreeObj("moduleStepTree");
        var nodes = treeObj.getNodes();
        var nodesArr = [];
        getChildren(nodes, nodesArr);

        nodesArr = nodesArr.reverse();
        var nodeResult = [];
        $.each(nodesArr, function (index, item) {
            var nodeObj = {
                stepName: item.name
            };
            nodeResult.push(nodeObj);
        });

        var moduleId = tModal.getData().moduleId;
        var data = {
            moduleId: moduleId,
            moduleName: oVal.moduleName,
            stepList: nodeResult,
            systemId: systemId
        };

        requestAjax('post', 'aggregation/updateModuleStep', 'false', JSON.stringify(data), 'json', function (res) {
            alert(res.description);
            //隐藏模态框
            oModal.hide();
            //刷新模块表格
            objectInfoTable.removeRow({
                field: 'moduleId',
                values: [moduleId]
            });
            data.moduleId = res.data.moduleId;
            objectInfoTable.appendData(data);
        });
    }


}

function loadTree() {
    boObjTree.setting = {
        view: {
            selectedMulti: false,
            addHoverDom: addHoverDom,
            removeHoverDom: removeHoverDom
        },
        data: {
            simpleData: {
                enable: true
            }
        },

        edit: {
            showRemoveBtn: true,
            showRenameBtn: false,
            enable: true,
            drag: {
                isCopy: false,
                isMove: false
            }
        },
        callback: {
            beforeRemove: beforeRemove,
            onRemove: onRemove,
        }
    };

    requestAjax('post', 'http://rap2api.taobao.org/app/mock/241077/getTreeView', 'false', null, 'json', function (res) {
        if (res.code === 200) {
            var _data = res.data;
            let nodes = ztreeFormat(_data);
            $.fn.zTree.init(boObjTree, boObjTree.setting, nodes);
            boObjTree.oTree = $.fn.zTree.getZTreeObj("boObjTree");
        }
    });

    function onRemove(event, treeId, treeNode) {
        if (treeNode.children) {
            alert("存在子节点不允许删除！");
        } else {
            requestAjax('post', 'BeanStructure/deleteModule?nodeId=' + treeNode.id, 'false', null, 'json', function (res) {
                alert(res.description);
                if (res.code === 200) {
                    //删除节点
                    var treeObj = $.fn.zTree.getZTreeObj("boObjTree");
                    var nodes = treeObj.getSelectedNodes();
                    for (let i = 0, l = treeNode.length; i < l; i++) {
                        treeObj.removeNode(nodes[i]);
                    }
                }
            });
        }
    }
}


/***----------authorityManage requestAjax-----------------**/
function requestAjax(type, url, async, data, dataType, callback) {
    $.ajax({
        type: type,
        contentType: "application/json",
        url: url,
        beforeSend: function () {
            console.log("准备好发送请求了");
        },
        complete: function () {
            console.log("请求发送完毕了");
        },
        async: async,
        data: data,
        dataType: dataType,
        success: function (result) {
            // console.log(result);
            callback(result);
        },
        error: function (result) {
            callback(result);
        }
    });
}


function addHoverDom(treeId, treeNode) {
    //不是父节点没有新增按钮
    if (treeNode.level == 0) {
        addModelBtn(treeNode)
    }
    if (!treeNode.children) {
        deleteSysOrModuleBtn(treeNode);
    }
}

function addModelBtn(treeNode) {
    var sObj = $("#" + treeNode.tId + "_span");

    if (treeNode.editNameFlag || $("#addBtn_" + treeNode.tId).length > 0) return;

    var addStr = "<span class='button add' id='addBtn_" + treeNode.tId
        + "' title='新增模块' onfocus='this.blur();'></span>";

    sObj.after(addStr);

    var btn = $("#addBtn_" + treeNode.tId);

    if (btn) btn.bind("click", function () {

        //modal
        var tModalConfigure = {
            id: 'addModule',
            frameObj: $('#modal_department'),
            title: '新增模块',
            callbacks: {
                onCommit: addModuleCommit
            }
        };
        var tModal = new comModal();
        tModal.init(tModalConfigure);

        addModuleModal.treeNode = treeNode;

        var formOption = {
            formId: 'moduleForm',
            initContent: [
                {
                    itemId: "sysModule",
                    label: {
                        text: "模块名 "
                    },
                }]
        };
        var tForm = new comForm();
        tForm.init(formOption);

        tModal.appendEle(tForm);
        return false;
    });
}


function deleteSysOrModuleBtn(treeNode) {
    var sObj = $("#" + treeNode.tId + 2 + "_span");
    if (treeNode.editNameFlag || $("#addBtn_" + treeNode.tId + 2).length > 0) return;

    var addStr = "<span class='button remove' id='addBtn_" + treeNode.tId + 2
        + "' title='删除' onfocus='this.blur();'></span>";

    sObj.after(addStr);

    var btn = $("#addBtn_" + treeNode.tId + 2);

    if (btn) btn.bind("click", function () {
        if (confirm("确认删除吗？")) {
            var requestData = "nodeId =" + treeNode.id;
            requestAjax('post', 'BeanStructure/deleteModule', 'false', requestData, 'json', function (res) {
                alert(res.description);
                if (res.code === 200) {
                    //删除节点
                    var treeObj = $.fn.zTree.getZTreeObj("boObjTree");
                    var nodes = treeObj.getSelectedNodes();
                    for (let i = 0, l = treeNode.length; i < l; i++) {
                        treeObj.removeNode(nodes[i]);
                    }
                }
            });
        }
        return false;
    });
}

function addModuleCommit(e, oModal) {
    let oVal = oModal.getValues();

    var data = {
        name: oVal.sysModule,
        parentId: addModuleModal.treeNode.id
    };
    requestAjax('post', 'http://rap2api.taobao.org/app/mock/241077/addModule', 'false', JSON.stringify(data), 'json', function (res) {
        alert(res.description);
        if (res.code === 200) {
            //隐藏模态框
            oModal.hide();

            //新增节点
            var treeObj = $.fn.zTree.getZTreeObj("boObjTree");
            var arr = [];
            arr.push(res.data);
            treeObj.addNodes(addModuleModal.treeNode, arr);
        }
    });
}


function removeHoverDom(treeId, treeNode) {
    $("#addBtn_" + treeNode.tId).unbind().remove();
    $("#addBtn_" + treeNode.tId + 2).unbind().remove();
}

function beforeRemove(treeId, treeNode) {
    return confirm("确认删除吗？");
}

var ztreeData = [];

function ztreeFormat(data) {
    $.each(data, function (index, ele) {
        var node = {
            id: ele.id,
            pId: ele.parentId,
            objectId: ele.objectId,
            name: ele.name,
            open: true
        };
        ztreeData.push(node);
        var children = ele.children;
        if (children != null && children.length > 0) {
            ztreeFormat(children)
        }
    });
    return ztreeData;
}

/**
 * 清空新增步骤面板中的input内容
 */
function updateStepBtn() {
    let treeObj = $.fn.zTree.getZTreeObj("boObjTree");
    let nodes = treeObj.getSelectedNodes()[0];

    var data = {
        id: $("#stepId").val(),
        systemModuleId: moduleId,
        name: $("#testCaseName").val(),
    };

    if (ifNotChange(updModuleName, moduleName)) {
        delete data.moduleId
    }


    requestAjax('post', 'aggregation/updateStep', 'false', JSON.stringify(data), 'json', function (res) {
        alert2(res.description);
        //修改信息成功后的显示要改变
        if (res.code === 200) {
            var node = boObjTree.oTree.getNodeByParam("id", data.id);
            node.id = data.id;
            node.name = data.name;
        }
        boObjTree.oTree.updateNode(node);
    });
}

function ifNotChange(updVal, val) {
    if (updVal === val) {
        return true;
    }
    if (val == null) {
        if (updVal === '') {
            return true;
        }
    }
    return false;
}

function getChildren(arr, nodesArr) {
    $.each(arr, function (index, ele) {
        if (ele.children) {
            getChildren(ele.children, nodesArr);
        }
        nodesArr.push(ele);
    })
}

/**
 * 新增系统
 */
function addSystem() {
    addSystemModal.treeData = null;

    //modal
    var tModalConfigure = {
        id: 'addSystem',
        frameObj: $('#modal_department'),
        title: '新增系统',
        callbacks: {
            onCommit: addSystemCommit
        }
    };
    var tModal = new comModal();
    tModal.init(tModalConfigure);

    var treeObj = $.fn.zTree.getZTreeObj("boObjTree");
    // treeObj.addNodes(addStepPanel.treeData, addNode);


    var formOption = {
        formId: 'moduleForm',
        initContent: [
            {
                itemId: "systemName",
                label: {
                    text: "系统名 "
                },
            }]
    };
    var tForm = new comForm();
    tForm.init(formOption);

    tModal.appendEle(tForm);
}

function addSystemCommit(e, oModal) {
    let oVal = oModal.getValues();

    var data = {
        name: oVal.systemName,
    };
    requestAjax('post', 'http://rap2api.taobao.org/app/mock/241077/addSystem', 'false', JSON.stringify(data), 'json', function (res) {
        alert(res.description);
        if (res.code === 200) {
            //隐藏模态框
            oModal.hide();

            //新增节点
            var treeObj = $.fn.zTree.getZTreeObj("boObjTree");
            var arr = [];
            arr.push(res.data);
            treeObj.addNodes(addSystemModal.treeNode, arr);
        }
    });
}


/**
 * 预览Excel
 */
function previewExcel() {
    requestAjax('post', 'aggregation/getTestCaseVoBySystem', false, JSON.stringify({
        systemId: systemId,
        moduleId: moduleId
    }), 'json', function (res) {

        var tModalConfigure = {
            id: 'previewExcelModal',
            frameObj: $('#modal_preview_excel'),
            type: 'browse',
            title: '预览生成用例Excel',
            eles: {
                tables: {
                    "previewExcelTable": {
                        defaultOptions: {
                            tableID: "previewExcelTable"
                        },
                        btOptions: {
                            showRefresh: false,
                            showExport: false,
                            showColumns: false,
                            columns: [
                                {
                                    field: 'manageModule',
                                    title: '所属模块'
                                }, {
                                    field: 'testCaseTitle',
                                    title: '用例标题'
                                },
                                {
                                    field: 'precondition',
                                    title: '前置条件'
                                }, {
                                    field: 'stepList',
                                    title: '步骤'
                                }, {
                                    field: 'expected',
                                    title: '预期'
                                }, {
                                    field: 'priority',
                                    title: '优先级'
                                }, {
                                    field: 'testCaseType',
                                    title: '用例类型'
                                }, {
                                    field: 'applicableStage',
                                    title: '适用阶段'
                                }
                            ],
                            showPaginationSwitch: false,
                            height: 650,
                            pageNumber: 1,
                            pageSize: 1000
                        }
                    }
                }
            }
        };
        var tModal = new comModal();
        tModal.init(tModalConfigure);

        tModal.eles.tables['previewExcelTable'].appendData(res.data);

    });
}

/**
 * 导出Excel
 */
function exportExcel() {
    Common.postExcelFile({systemId: systemId, moduleId: moduleId}, "aggregation/generateTestCasesExcel");
}