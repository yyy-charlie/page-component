package com.treemanage.treecomponent.controller;

import com.container.treecontainer.bo.TreeNode;
import com.treemanage.treecomponent.biz.intf.BeanStructureBiz;
import com.treemanage.treecomponent.bo.BeanStructureInfo;
import com.treemanage.treecomponent.msg.BaseResponse;
import com.treemanage.treecomponent.parse.ParseViewAndBeanModule;
import com.treemanage.treecomponent.util.ReturnUtils;
import com.treemanage.treecomponent.vo.VOBeanStructureInfo;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletResponse;
import java.io.InputStream;
import java.util.List;


/**
 * @author Mist
 * @version 1.0
 * @created 27-12-2019 17:55:40
 */
@RestController
@ResponseBody
@RequestMapping("/beanStructure")
public class BeanStructurePageController {

	private static final Logger logger = LogManager.getLogger();

	@Autowired
	private BeanStructureBiz beanStructureBiz;

	@Autowired
	private ParseViewAndBeanModule parseViewAndBeanModule;

	/**
	 * 新增系统
	 *
	 * @param treeNode
	 */
	@RequestMapping("/addSystem")
	public BaseResponse addSystem(@RequestBody TreeNode treeNode){

		String description = "新增系统";

		TreeNode result = null;
		try {
			result = beanStructureBiz.addNode(treeNode);
		} catch (Exception e) {
			description = ReturnUtils.judgeTreeContainerException(e,description,"新增系统名称重复");
		}

		return ReturnUtils.parseReturn(result,description);
	}



	/**
	 * 删除系统
	 *
	 * @param nodeId
	 */
	@RequestMapping("/deleteSystem")
	public BaseResponse deleteSystem(@RequestParam Long nodeId){

		String description = "删除系统";

		boolean result = false;

		try {
			result = beanStructureBiz.deleteNode(nodeId);
		} catch (Exception e) {
			description = ReturnUtils.judgeBaseException(e,description);
		}

		return ReturnUtils.parseReturn(result,description);
	}



	/**
	 * 更新系统
	 *
	 * @param treeNode
	 */
	@RequestMapping("/updateSystem")
	public BaseResponse updateSystem(@RequestBody TreeNode treeNode){

		String description = "更新系统";

		TreeNode result = null;
		try {
			result = beanStructureBiz.updateNode(treeNode);
		} catch (Exception e) {
			description = ReturnUtils.judgeTreeContainerException(e,description,"更新系统名称重复");
		}

		return ReturnUtils.parseReturn(result,description);
	}

	/**
	 * 新增模块
	 *
	 * @param treeNode
	 */
	@RequestMapping("/addModule")
	public BaseResponse addModule(@RequestBody TreeNode treeNode){

		String description = "新增模块";

		TreeNode result = null;
		try {
			result = beanStructureBiz.addNode(treeNode);
		} catch (Exception e) {
		description = ReturnUtils.judgeTreeContainerException(e,description,"新增模块名称重复");
		}

		return ReturnUtils.parseReturn(result,description);
	}



	/**
	 * 删除模块
	 *
	 * @param nodeId
	 */
	@RequestMapping("/deleteModule")
	public BaseResponse deleteModule(@RequestParam Long nodeId){

		String description = "删除模块";

		boolean result = false;
		try {
			result = beanStructureBiz.deleteNode(nodeId);
		} catch (Exception e) {
			description = ReturnUtils.judgeBaseException(e,description);
		}

		return ReturnUtils.parseReturn(result,description);
	}

	/**
	 * 更新模块
	 *
	 * @param treeNode
	 */
	@RequestMapping("/updateModule")
	public BaseResponse updateModule(@RequestBody TreeNode treeNode){

		String description = "更新模块";

		TreeNode result = null;
		try {
			result = beanStructureBiz.updateNode(treeNode);
		} catch (Exception e) {
			description = ReturnUtils.judgeTreeContainerException(e,description,"更新模块名称重复");
		}

		return ReturnUtils.parseReturn(result,description);
	}


	/**
	 * 获得BO结构对象信息
	 *
	 * @param nodeId
	 */
	@RequestMapping("/getBeanStructureInfo")
	public BaseResponse getBeanStructureInfo(@RequestParam Long nodeId){
		String description = "获得BO结构对象信息";

		BeanStructureInfo beanStructureInfo = beanStructureBiz.getBeanStructureInfo(nodeId);

		VOBeanStructureInfo result = parseViewAndBeanModule.parseBO2VO(beanStructureInfo);

		return ReturnUtils.parseReturn(result,description);
	}

	/**
	 * 修改BO结构对象信息
	 *
	 * @param beanStructureInfo
	 */
	@RequestMapping("/updateBeanStructureInfo")
	public BaseResponse updateBeanStructureInfo(@RequestBody VOBeanStructureInfo beanStructureInfo){
		String description = "修改BO结构对象信息";

		VOBeanStructureInfo result = null;
		try {

			BeanStructureInfo bean = parseViewAndBeanModule.parseVO2BO(beanStructureInfo);
			bean = beanStructureBiz.updateBeanStructureInfo(bean);
			result = parseViewAndBeanModule.parseBO2VO(bean);

		} catch (Exception e) {
			description = ReturnUtils.judgeBaseException(e,description);
		}

		return ReturnUtils.parseReturn(result,description);
	}

	/**
	 * 展示 节点的子孙节点
	 *
	 * @param parentNodeId
	 */
	@RequestMapping("/getDescendantsView")
	public BaseResponse getDescendantsView(@RequestParam Long parentNodeId){

		String description = "展示节点的子孙节点";

		List<TreeNode> result = beanStructureBiz.getDescendantsView(parentNodeId);

		return ReturnUtils.parseReturn(result,description);
	}

	/**
	 * 展示 树
	 *
	 */
	@RequestMapping("/getTreeView")
	public BaseResponse getTreeView(){
		String description = "展示树";

		List<TreeNode> result = beanStructureBiz.getTreeView();

		return ReturnUtils.parseReturn(result,description);
	}

	/**
	 * 导入BO对象
	 * @param parentNodeId
	 * @param file
	 */
	@RequestMapping("/inportBeanStructureInfo")
	public BaseResponse inportBeanStructureInfo(@RequestParam Long parentNodeId,@RequestParam MultipartFile file){
		String description = "导入BO对象";

		TreeNode result = null;
		try {
			result = beanStructureBiz.inportBeanStructureInfo(parentNodeId,file);
		} catch (Exception e) {
			description = ReturnUtils.judgeBaseException(e,description);
		}

		return ReturnUtils.parseReturn(result,description);
	}

	/**
	 * 导出BO对象
	 *
	 * @param nodeId
	 */
	@RequestMapping("/exportBeanStructureInfo")
	public void exportBeanStructureInfo(HttpServletResponse response, Long nodeId){

		String description = "导出BO对象";

		InputStream result = null;
		try {
			result = beanStructureBiz.exportBeanStructureInfo(nodeId);
		} catch (Exception e) {
			description = ReturnUtils.judgeBaseException(e,description);
		}

	}




	/*------------------------------------------------------------------------------------------------------------------*/


}